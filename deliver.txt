Projeto 2 - Software a ser testado.

Composição do grupo:
-Bruno Sequeira nº 2020235721
-Rui Santos nº 2020225542 
PL2
Temos cerca de 2 códigos:


Este código em Java implementa um solver para o jogo Sudoku. Ele utiliza uma técnica de backtracking para tentar preencher o tabuleiro de Sudoku de forma válida, ou seja, respeitando todas as regras do jogo.

A função em estudo é: solve.

import java.util.*;
public class code {

    static char[][] board = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
    };

    public static void solveSudoku(char[][] board) {
        solve(board);
    }
    public static boolean solve(char[][]board){
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){

                if(board[i][j]=='.'){

                    for(char num='1';num<='9';num++){
                        if(isPossible(board,i,j,num)){
                            board[i][j]=num;
                            if(solve(board)){
                                return true;
                            }
                            //if the solve function return false then the prev num must be in wrong pos so then backtrack
                            //and fill that with '.'. 
                            else{
                                board[i][j]='.';
                            }
                        }
                    }

                    //if it is not possible to select a number from 1 to 9 the solve function return false;
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isPossible(char[][]board,int row,int col,char c){
        for(int i=0;i<9;i++){
            if(board[i][col]==c) return false;//col check

            if(board[row][i]==c) return false; //row check

            if(board[3*(row/3)+i/3][3*(col/3)+i%3]==c) return false;//checking in each 3 x 3 matrix
        }
        return true;

    }

    public static void main(String[] args){

        solveSudoku(board);
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        
    }

}





###################################################################################################################################################################################################################


Este código implementa o algoritmo de Dijkstra para encontrar o caminho mais curto em um grafo ponderado direcionado.

A função em estudo é "dijkstra"

package Code;
import java.util.*;

class Vertex {
    public int id;
    public int distance;

    public Vertex(int id) {
        this.id = id;
        this.distance = Integer.MAX_VALUE;
    }
}

class Edge {
    public int source;
    public int destination;
    public int weight;

    public Edge(int source, int destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }
}

class Graph {
    public Map<Integer, List<Edge>> adjacencyList;

    public Graph(int numVertices) {
        this.adjacencyList = new HashMap<>();
        for (int i = 0; i < numVertices; i++) {
            adjacencyList.put(i, new ArrayList<>());
        }
    }

    public void addEdge(int source, int destination, int weight) {
        List<Edge> edges = adjacencyList.get(source);
        edges.add(new Edge(source, destination, weight));
    }

    public List<Edge> getEdges(int vertex) {
        return adjacencyList.get(vertex);
    }
}

public class Dijkstra {
    public static void main(String[] args) {
        int numVertices = 5;
        Graph graph = new Graph(numVertices);
        graph.addEdge(0, 1, 10);
        graph.addEdge(0, 2, 5);
        graph.addEdge(1, 2, 2);
        graph.addEdge(1, 3, 1);
        graph.addEdge(2, 1, 3);
        graph.addEdge(2, 3, 9);
        graph.addEdge(2, 4, 2);
        graph.addEdge(3, 4, 4);
        graph.addEdge(4, 0, 7);

        int sourceVertex = 0;
        dijkstra(graph, sourceVertex);
    }

    public static void dijkstra(Graph graph, int source) {
        int numVertices = graph.adjacencyList.size();
        boolean[] visited = new boolean[numVertices];
        PriorityQueue<Vertex> priorityQueue = new PriorityQueue<>(numVertices, Comparator.comparingInt(v -> v.distance));
        Vertex[] vertices = new Vertex[numVertices];

        for (int i = 0; i < numVertices; i++) {
            vertices[i] = new Vertex(i);
            if (i == source) {
                vertices[i].distance = 0;
            }
            priorityQueue.add(vertices[i]);
        }

        while (!priorityQueue.isEmpty()) {
            Vertex currentVertex = priorityQueue.poll();
            visited[currentVertex.id] = true;

            List<Edge> edges = graph.getEdges(currentVertex.id);
            for (Edge edge : edges) {
                if (!visited[edge.destination]) {
                    int newDistance = currentVertex.distance + edge.weight;
                    if (newDistance < vertices[edge.destination].distance) {
                        priorityQueue.remove(vertices[edge.destination]);
                        vertices[edge.destination].distance = newDistance;
                        priorityQueue.add(vertices[edge.destination]);
                    }
                }
            }
        }

        printSolution(vertices);
    }

    public static void printSolution(Vertex[] vertices) {
        System.out.println("Vertex \t Distance from Source");
        for (Vertex vertex : vertices) {
            System.out.println(vertex.id + " \t\t " + vertex.distance);
        }
    }
}
#############################################################################################################

